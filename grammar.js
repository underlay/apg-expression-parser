// Generated automatically by nearley, version 2.19.7
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "main$ebnf$1$subexpression$1", "symbols": ["prefixes", "__"], "postprocess": (r) => r[0]},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "main$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "main$ebnf$2$subexpression$1", "symbols": ["definitions", "__"], "postprocess": (r) => r[0]},
    {"name": "main$ebnf$2", "symbols": ["main$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "main$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "main$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "main", "symbols": ["_", "main$ebnf$1", "main$ebnf$2", "main$string$1", "__", "map", "_"], "postprocess": (r) => ({ prefixes: r[1] || [], expressions: r[2] || [], map: r[5] })},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": () => null},
    {"name": "__$ebnf$1", "symbols": [/[\s]/]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": () => null},
    {"name": "hex", "symbols": [/[A-Fa-f0-9]/]},
    {"name": "string$ebnf$1", "symbols": []},
    {"name": "string$ebnf$1", "symbols": ["string$ebnf$1", "char"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "string", "symbols": [{"literal":"\""}, "string$ebnf$1", {"literal":"\""}], "postprocess": d => d[1].join("")},
    {"name": "char", "symbols": [/[^\\"\n]/], "postprocess": id},
    {"name": "char", "symbols": [{"literal":"\\"}, "escape"], "postprocess": d => JSON.parse("\"" + d.join("") + "\"")},
    {"name": "escape", "symbols": [/["\\/bfnrt]/], "postprocess": id},
    {"name": "escape", "symbols": [{"literal":"u"}, "hex", "hex", "hex", "hex"], "postprocess": d => d.join("")},
    {"name": "prefix$string$1", "symbols": [{"literal":"p"}, {"literal":"r"}, {"literal":"e"}, {"literal":"f"}, {"literal":"i"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "prefix$ebnf$1", "symbols": [/[a-z]/]},
    {"name": "prefix$ebnf$1", "symbols": ["prefix$ebnf$1", /[a-z]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "prefix", "symbols": ["prefix$string$1", "__", "prefix$ebnf$1", "__", {"literal":"="}, "__", "absolute"], "postprocess": (r) => [r[2].join(""), r[6]]},
    {"name": "prefixes$ebnf$1", "symbols": []},
    {"name": "prefixes$ebnf$1$subexpression$1", "symbols": ["__", "prefix"], "postprocess": (r) => r[1]},
    {"name": "prefixes$ebnf$1", "symbols": ["prefixes$ebnf$1", "prefixes$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "prefixes", "symbols": ["prefix", "prefixes$ebnf$1"], "postprocess": (r) => [r[0], ...r[1]]},
    {"name": "absolute$ebnf$1", "symbols": [/[a-z]/]},
    {"name": "absolute$ebnf$1", "symbols": ["absolute$ebnf$1", /[a-z]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "absolute$ebnf$2", "symbols": [/[a-zA-Z0-9\-\/\_\.\:]/]},
    {"name": "absolute$ebnf$2", "symbols": ["absolute$ebnf$2", /[a-zA-Z0-9\-\/\_\.\:]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "absolute", "symbols": ["absolute$ebnf$1", {"literal":":"}, "absolute$ebnf$2", /[\/\#]/], "postprocess": (r) => r[0].join("") + r[1] + r[2].join("") + r[3]},
    {"name": "name$ebnf$1", "symbols": []},
    {"name": "name$ebnf$1", "symbols": ["name$ebnf$1", /[a-zA-Z0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "name", "symbols": [/[a-z]/, "name$ebnf$1"], "postprocess": (r) => r[0] + r[1].join("")},
    {"name": "definition$string$1", "symbols": [{"literal":"e"}, {"literal":"x"}, {"literal":"p"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "definition", "symbols": ["definition$string$1", "__", "name", "__", {"literal":"="}, "__", "expression"], "postprocess": (r) => [r[2], r[6]]},
    {"name": "definitions$ebnf$1", "symbols": []},
    {"name": "definitions$ebnf$1$subexpression$1", "symbols": ["__", "definition"], "postprocess": (r) => r[1]},
    {"name": "definitions$ebnf$1", "symbols": ["definitions$ebnf$1", "definitions$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "definitions", "symbols": ["definition", "definitions$ebnf$1"], "postprocess": (r) => [r[0], ...r[1]]},
    {"name": "uri$ebnf$1", "symbols": []},
    {"name": "uri$ebnf$1", "symbols": ["uri$ebnf$1", /[a-z]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "uri$ebnf$2", "symbols": [/[a-zA-Z0-9\-\/\_\.\:\#]/]},
    {"name": "uri$ebnf$2", "symbols": ["uri$ebnf$2", /[a-zA-Z0-9\-\/\_\.\:\#]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "uri", "symbols": ["uri$ebnf$1", {"literal":":"}, "uri$ebnf$2"], "postprocess": (r) => r[0].join("") + r[1] + r[2].join("")},
    {"name": "slot$string$1", "symbols": [{"literal":"-"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "slot", "symbols": ["uri", "__", "slot$string$1", "__", "expression"], "postprocess": (r) => ({ type: "slot", key: r[0], value: r[4] })},
    {"name": "case$string$1", "symbols": [{"literal":"<"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "case", "symbols": ["uri", "__", "case$string$1", "__", "expression"], "postprocess": (r) => ({ type: "case", key: r[0],  value: r[4]})},
    {"name": "trailing$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "_"]},
    {"name": "trailing$ebnf$1", "symbols": ["trailing$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "trailing$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "trailing", "symbols": ["trailing$ebnf$1"], "postprocess": () => null},
    {"name": "expression", "symbols": [{"literal":"("}, "_", "expression", "_", {"literal":")"}], "postprocess": (e) => e[2]},
    {"name": "expression", "symbols": ["exprs"], "postprocess": (e) => e[0]},
    {"name": "exprs$ebnf$1", "symbols": []},
    {"name": "exprs$ebnf$1$subexpression$1", "symbols": ["__", "expr"], "postprocess": (e) => e[1]},
    {"name": "exprs$ebnf$1", "symbols": ["exprs$ebnf$1", "exprs$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "exprs", "symbols": ["expr", "exprs$ebnf$1"], "postprocess": (e) => [e[0], ...e[1]]},
    {"name": "expr", "symbols": ["name"], "postprocess": (r) => ({ type: "variable", value: r[0] })},
    {"name": "expr", "symbols": [{"literal":"!"}], "postprocess": (r) => ({ type: "terminal" })},
    {"name": "expr", "symbols": [{"literal":"<"}, "uri", {"literal":">"}], "postprocess": (r) => ({ type: "identifier", value: r[1] })},
    {"name": "expr", "symbols": ["string", "__", "uri"], "postprocess": (r) => ({ type: "constant", value: r[0], datatype: r[2] })},
    {"name": "expr", "symbols": [{"literal":"*"}, "__", "uri"], "postprocess": (r) => ({ type: "dereference", key: r[2] })},
    {"name": "expr", "symbols": [{"literal":"."}, "__", "uri"], "postprocess": (r) => ({ type: "projection", key: r[2] })},
    {"name": "expr", "symbols": [{"literal":"/"}, "__", "expression", "__", {"literal":"%"}, "__", "uri"], "postprocess": (r) => ({ type: "injection", key: r[6], value: r[2] })},
    {"name": "expr$ebnf$1", "symbols": []},
    {"name": "expr$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "_", "slot", "_"], "postprocess": (r) => r[2]},
    {"name": "expr$ebnf$1", "symbols": ["expr$ebnf$1", "expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "expr", "symbols": [{"literal":"{"}, "_", "slot", "_", "expr$ebnf$1", "trailing", {"literal":"}"}], "postprocess": (r) => ({ type: "tuple", slots: [r[2], ...r[4]] })},
    {"name": "expr$ebnf$2", "symbols": []},
    {"name": "expr$ebnf$2$subexpression$1", "symbols": [{"literal":";"}, "_", "case", "_"], "postprocess": (r) => r[2]},
    {"name": "expr$ebnf$2", "symbols": ["expr$ebnf$2", "expr$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "expr", "symbols": [{"literal":"["}, "_", "case", "_", "expr$ebnf$2", "trailing", {"literal":"]"}], "postprocess": (r) => ({ type: "match", case: [r[2], ...r[4]] })},
    {"name": "path", "symbols": [/[\.\\]/, "__", "uri"], "postprocess": (r) =>  ({ type: r[0] === "." ? "component" : "option", value: r[2] })},
    {"name": "link$string$1", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "link$ebnf$1", "symbols": []},
    {"name": "link$ebnf$1$subexpression$1", "symbols": ["__", "path"], "postprocess": (r) => r[1]},
    {"name": "link$ebnf$1", "symbols": ["link$ebnf$1", "link$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "link$string$2", "symbols": [{"literal":"="}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "link", "symbols": ["uri", "__", "link$string$1", "__", "uri", "link$ebnf$1", "__", "link$string$2", "__", "expression"], "postprocess": (r) => ({ type: "link", key: r[0], source: r[4], target: r[5], value: r[9] })},
    {"name": "map$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "map$ebnf$1", "symbols": []},
    {"name": "map$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "_", "link", "_"], "postprocess": (r) => r[2]},
    {"name": "map$ebnf$1", "symbols": ["map$ebnf$1", "map$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "map", "symbols": ["map$string$1", "__", {"literal":"{"}, "_", "link", "_", "map$ebnf$1", "trailing", {"literal":"}"}], "postprocess": (r) => [r[4], ...r[6]]}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
